URL Structure

1. URLs seen by the user.

URLs seen by the user in the browser tells her/him which type of application 
s/he is currently using. They are as simple as possible. There are six types of 
URLs in Raw Salad:

    1)  http://example.pl     
        the main site where the user chooses data-set to work with
   
    2)  http://example.pl/choose
        the site where the user chooses from which perspective s/he wants to see 
        data from the choosen data-set
        
    3)  http://example.pl/browser
        the site where the user can traverse data and mark some of it to be 
        used later on
        
    4)  http://example.pl/vis/{snapshot_code}?type={type_of_visualisation}
        the site where data previously chosen by the user data visualized (more 
        about snapshot code in paragraph 3)
        
    5)  http://example.pl/snapshots/{snapshot_code}
        the site presenting data prepared earlier by a user
        
    6)  http://example.pl/download
        the site where the user can download choosen data


2. Full URLs.

URLs connected with browser and download contain more data which is invisible 
for the user.

    1)  Browser app:
        Full form of the URL:
        
        http://example.pl/browser/col/x/view/y/{browser_data }
        
        x – is the number of collection (data-set) the user wants to see
        y – is the number of perspective the user wants to see data from
        
        More about browser data in paragraph 3.

    2)  Download app:
        There are 3 types of portion of data user can download:
            a) only marked data
            b) marked data with its context
            c) all data from the collection
        For a) and b) types URL which is sent to server has the following form:

            http://example.pl/download/{browser_data}

        where browser data has the same form as in 1).

        For c) type URL has the following form:
    
            http://example.pl/download/col/x
    
        where x is the chosen collection number.


3. Representation of data in URLs.

Data open or marked by the user must be sometimes used by the application. 
It happens in browser, download, snapshots and vis parts of the site. 
Representation of data in browser and download is the same – it is called 
‘browser data’, also representation in snapshots is the same as in vis – 
‘snapshot code’. ‘Browser data’ and ‘snapshot code’ are very similar, the only 
difference between them is that browser data includes which parts of data-sets 
are opened and which are marked, while ‘snapshot code’ tells which data is 
marked by the user.

Type of data representation is as general as possible, so that is can be used 
for all collections of data. Levels of data are marked by successive alphabet 
letters starting from ‘a’ to ‘x’, ‘y’ is reserved for year. It gives over 20 
levels of a data hierarchy. 
After the letter there is a number telling which function from that level is 
used, e.g. ‘a3’ – third function from the first level of hierarchy.

Special characters:
    “_” (underscore) – tells that this data is marked
    “-“ (hyphen) – tells that this data is open (not used in snapshot code)

Remarks:
    - Hyphen cannot be used before ‘y’, because this data does not aggregate 
      other data (it is just a number)
      
    - “-_” can be connected, it means that this level of data is marked to 
      visualization and is opened by the user when no y appears after the last 
      level of data, all years are included, e.g. a1 means a1y1y2y3..yn (data 
      from the first point of first level of hierarchy for all years)


Some examples are shown below to help to understand how used URLs look like. 
They contain information which functions are opened and marked. Examples 
presented below does not have prefix of the URL 
(e.g. http://example.pl/browser/col/1/view/2):

    1)  Opened: 1.1
        Marked: 1.1.2

        browser data   => a1-b1_c2
        snapshot code => a1b1_c2
    ----------------------------------------------
    2)  Opened: 1.1, 1.2
        Marked: 1.1.3

        browser data   => a1-b1_c3-b2
        snapshot code => a1b1_c3
    ----------------------------------------------

    3)  Opened: 1.1, 1.2
        Marked: 1.1.3, 1.2

        browser data   => a1-b1_c3-_b2
        snapshot code => a1b1_c1_b2
    ----------------------------------------------
    4)  Opened: 1.3
        Marked: 1.3.1.1, 1.3.2.1

        browser data   => a1-b3c1_d1c2_d1
        snapshot code => a1b1c1_d1b3c2_d1
    ----------------------------------------------
    5)  Opened: 1.1, 2.1.3
        Marked: 1.1.1, 1.1.2, 2.1y1,2 (y means years, numbers after y mean 
        which years are marked, no y means that all years are marked)

        browser data   => a1-b1_c1_c2a2b1_y1_y2-c3
        snapshot code => a1b1_c1_c2a2b1_y1_y2
    ----------------------------------------------
    6)  Opened: 1.1, 1.2, 1.3
        Marked: 1.1.1:r1,2, 1.1.2, 1.4.1:r1,3

        browser data   => a1-b1c1_y1_y2_c2-b2-b3b4c1_y1_y3
        snapshot code => a1b1c1_y1_y2_c2b4c1_y1_y3
    ----------------------------------------------
    7)  Opened: 1.1, 1.2
        Marked: 1.1, 1.1.1, 1.1.1.2:r1, 1.2

        browser data   => a1-_b1_c1d2_y1-_b2
        snapshot code => a1_b1_c1d2_y1_b2
    ----------------------------------------------

4.  Exemplary sequence of user actions.
    (first url is seen in the browser, second url [in brakets] in sent by AJAX)

    1)  Gets on the main site.
        http://example.pl
      [ http://example.pl ]

    2)  Chooses collection (budget – number 1):
        http://example.pl/choose
      [ http://example.pl/col/1 ]


    3)  Chooses perspective (task budget – number 2):
        http://example.pl/browser
      [ http://example.pl/browser/col/1/view/2 ]

    4)  Opens function number 1 (first level of data):
        http://example.pl/browser
      [ http://example.pl/browser/col/1/view/2/-a1 ]

    5)  Opens task number 2(second level of data):
        http://example.pl/browser
      [ http://example.pl/browser/col/1/view/2/-a1-b2 ]

    6)  Marks years number 1 and 3(only year 2 is not chosen)
        http://example.pl/browser
      [ http://example.pl/browser/col/1/view/2/-a1-b2_y1_y3 ]

    7)  Opens task number 3:
        http://example.pl/browser 
      [ http://example.pl/browser/col/1/view/2/-a1-b2_y1_y3-b3 ]

    8)  Chooses year number 2(years 1 and 3 are not chosen)
        http://example.pl/browser
      [ http://example.pl/browser/col/1/view/2/-a1-b2_y1_y3-b3_y2 ]

    9)  Presses ‘make a snapshot’ button.
        It creates snapshot with URL (which is a permalink):
        The user is still at http://example.pl/browser        
      [ http://example.pl/snapshot/col/1/view/2/a1b2_y1_y3b3_y2 ]
    
    10) Presses ‘visualize’ button and chooses type of visualization:
        http://example.pl/vis
      [ http://example.pl/vis/col/1/view/2/a1b2_y1_y3b3_y2&type={type_of_vis} ]

    11) Presses button responsible for downloading data
        http://example.pl/browser
        Then a request is sent with URL:
      [ http://example.pl/download/col/1/view/2/a1b2_y1_y3b3_y2 ]
