DATA STORAGE SETUP
There are 2 storages used for different purposes:

    1. PostgreSQL - used as a main storage for table-like raw data;
    2. mongoDB - used as a storage of:
        - raw data
        - meta-data for the main raw data storage
        - snapshots (user defined views)
        - site navigation structure

DATA STORAGE - CONNECTION CONFIGURATION
There is a common .conf file with the configuration of connection to
both MongoDB and PostgreSQL. In the file there are all the details of
the connection for db drivers

File structure (this is a working configuration for read-only access
to both databases deployed at cecyf.megivps.pl):

[mongodb]
host: localhost
port: 27017
database: rawsdoc00
username: admin
password: <admin password>

[postgresql]
host: localhost
port: 5432
database: rawstbl00
username: pg_5009u
password: useruser

WARNING!
It is nesessary to use admin password in the case of mongodb! When a
user stores app state (permalink), a new collection in mongo is being
created. To make it possible the app logs on to mongo with a profile
of a user with the rights to write into the db (in rawsdoc00 it is
'admin'). Thus the .conf file should be put into the place unavailable
to reach from any insecure client!


POSTGRESQL
The basic setup of the server:
    server: PostgreSQL version 8.4
    database name: rawstbl00 
        where "raw" is a project name ("Raw Salad"), 
              "tbl" tells about the database type (table), 
              "00" is a version of the database
    port: 5432
    additional software:
        Python interface: psycopg2
        
The database rawsql00 is a single storage for all the raw data of two different 
models: Budget and Polls statistics. And despite the fact that all the domains,
tables, cursors and constraints will be named differently due to the semantic 
independence, every name should be preceded with a namespace: 

    <model namespace>_<object name>

The exceptions are domains that can be used in both models (e.g. long_descr 
that would work both for the data unit "Granice obwodu" of Local Polls as well
as "Cel" of Budget as unlimited varchar data type).

    <model namespace>s are: "poll" for "Local Polls", "budg" for "Budget"

Examples of tablenames in the Local Polls scheme: 
    poll_kandydaci_urzad
    poll_kandydaci_urzad, 
    poll_obwody
    poll_komitety
    
Examples of tablenames in the Budget scheme: 
    budg_cel 
    budg_main
    budg_instytucja
    
Every table and every column of each table should be coded specially and those 
codes should be stored in a special collection in the database of mongoDB
(see description below).

MONGODB - GENERAL SETUP
The basic setup:
    server: mongoDB version 1.8.1 64bit
    database name: rawsdoc00
        where "raws" is a project name ("Raw Salad")
              "doc" refers to db type (document oriented)
              "00" is a version
    port: 28017
    additional software:
        Python interface: pymongo 1.9


MONGODB - COLLECTIONS NAMESPACES
All the data in mongoDB are stored in a single database, but separate
collections.
There are 2 kinds of collections:
- actual data
- meta data

Any collection which stores the data for site navigation or any other
site-specific task is being considered as of 'meta data' kind

Naming collections:
<KK>_<TTTT><YYYY>_<descr>, where:
- <KK> (2 symbols) describes the kind of a collection: 'dd' (data),
'dr' (reference), 'md' (meta-data),  'ms' (meta-site), 'zz'
(collections for auxilar purposes)
- <TTTT> (4 symbols) indicates to what group of data a collection
belongs (examples: 'budg' - 'budget', 'poll' - local polls,
etc.). This part can be skipped in the names of references that can be
used in several data groups
- <YYYY> (4 symbols) - year (if it makes sense for a collection, if
not - this part is absent)
- <descr> - description

In the names of the meta-data collections ('md') the year is absent:
<KK>_<TTTT>_<descr>

User-defined collections (snapshots) are named by their unique id:
<KK>_<XXXXXXX>, where <KK> is 'sd' (state data) and <XXXXXXX> is a
unique id (integer with leading zeroes)

In the names of the collections connected to site structure ('ms') the
year and and the code of the data-set are absent:
<KK>_<descr>

Symbols allowed: Latin alphabet letters (ASCII), numbers and symbol '_'

Examples:
dd_budg2011_go - goal oriented budget 2011
dd_budg2011_tr - traditional budget 2011
dd_budg2012_fc - budget 'Funduszy celowe' 2011
dd_poll2010_kandydaci_rady - local polls 2010: Kandydaci Rady
dr_teryt - territory code TERYT
md_budg_scheme
md_poll_scheme
ms_nav - site navigation
sd_0000128 - snapshot # 128



MONGODB - NAVIGATOR
This provides web framework with the objects with information about the scheme
of hi level navigation of the web-site in the form of a tree
[datasets: [their perspectives: [ issues of the perspectives ] ] ]:

[
    {
        "idef": 0,
        "name": ..., 
        "description": ...,
        "perspective": [
            {
                "idef": 0, 
                "description": ..., 
                "name": ...,
                "issue": [
                    "string1",
                    "string2"
                    ]
                },
            {
                ...
                }
            ],
        },
    {
        ...
        }
    ]
    
Optional key for each level, except "issue" - "long_description"
Each element on the levels of dataset and perspective is identified by
idef (int). Issues are identified by str, and are represented by a
simple list of strings with no further info.


MONGODB - METADATA
There is one collection used a storage of meta-data for all the models
in the db. There should be as many docs as there are models are
specified in the Navigator

The metadata for all perspectives (views) are stored in the collection
md_budg_scheme as a list of documents (dicts), each specifying
particular perspective.

The meta-data structure of a perspective:

{
    "name": <str>, # codename of the collection (appears as a key
                            #  'request' in db API) 
    "perspective": <str>, # the descr of the collection (appears as a
                                      # collection description in a app tree view
    "ns": <str>, # collection name in mongodb
    "dataset": <int>, # dataset id
    "idef": <int>, # perspective (view) id
    "issue": <str>, # issue id
    "explorable": <str>, # field name, which is used as a link to open
                                    # the branch in the tree view of the app
    "max_level": <str>, # deepest level in the collection
    "columns": [ # list of all the columns, that can be shown to the
                        # user in the app tree view.
                        # the data from one collection can be used for
                        # several views, so it's nesessary to specify
                        # here ONLY those fields that appear in the
                        # view, described by a particular meta-data
                        # see (1)
        {
            "key": <str>, # key name as it's represented in the db
            "label": <str>, # label for the interface
            "type": <str>, # type ("string" or "number")
            "processable": <bool>, # can the field be filtered, sorted, etc.
    	    "checkable": <bool>, # only for field type "number" -
                                               # indicates if the field can be
                                               # checked or not (deprecated?)
	    "basic": <bool>, # true - field shown by default on the
                                       # opening of the app tree view

            },
        {
		...
            },
        ...
        ], # end of columns
    "aux": { # additional fields that are never shown in the app, but
                # should be extracted for technical purposes.
		# those fields never appear in the tree view of the
		# app, but CAN appear in any view (data or tree) of
		# the db API, if specified in the list of parameter ?fields=[...]
		# the examples of the fields given below
        "leaf": 1, # 1 means "appear"
        "parent": 1,
        "idef": 1,
        "info": 1
        },
    "query": { # query for extracting the data from the collection.
   	       	   # should be proper mongodb query - otherwise the
   	       	   # app returns no data!
    	       	   # empty dict means "extract all"
    	       	   # see (1)
        "node": { "$in" : [ null, 1 ] },
        "val": { "$and": { "$gt": 15000, "$lt": 25000 } },
	...
        },
    "sort": { # the dict describes how the data is sorted
    	         # the keys ("0", "1", ..., "n") are the order of
    	         # sorted columns;
    	         # values are dicts: {"fieldname": <int> # sort order }:
        "0": {"idef_sort": 1},
        "1": {"parent_sort": 1},
        "2": {"level": 1},
	...
	"n": {"fieldname": <int> } # sort order
	     		   	     	        # 1 - ascending, 0 - descending
        }
    }

(1)There can be more than 1 view based on the data from the same
collection, but separated using specific columns and/or query

Metadata Update

When it is nesessary to update metadata, it is recommeded to use the script:
/scripts/db/universal/json2mongo.py

type
$ json2mongo.py -h
for help

example of use:
python json2mongo.py -f path/to/rawsdata.conf -r '{"dataset":0,"idef":1,"issue":"2012"}' -c md_budg_scheme

NOTES:
1. use single quotes for query
2. remember about the types: "dataset:<int>,"idef":<int>,"issue":<str>
3. if option -c is used (delete existing before insert), then the
query specifies the record which should be deleted. Written wrong, but
syntactically correct (in terms of  mongodb) will result in
duplicating the record - the old one will be left in the metadata
collection, while the new one is inserted! In this case the former
record will be used for extraction and describing the data.
Following an example given above should always work clean!

