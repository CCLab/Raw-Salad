DATA STORAGE SETUP
There are 2 storages used for different purposes:

    1. PostgreSQL - used as a main storage for table-like raw data;
    2. mongoDB - used as a storage of:
        - raw data
        - meta-data for the main raw data storage
        - snapshots (user defined views)
        - site navigation structure

DATA STORAGE - CONNECTION CONFIGURATION
There is a common .conf file with the configuration of connection to
both MongoDB and PostgreSQL. In the file there are all the details of
the connection for db drivers

File structure (this is a working configuration for read-only access
to both databases deployed at cecyf.megivps.pl).

WARNING!
It is nesessary to use admin password in the case of mongodb! When a
user stores app state (permalink), a new collection in mongo is being
created. To make it possible the app logs on to mongo with a profile
of a user with the rights to write into the db. Thus the .conf file should be
put into the place unavailable to reach from any insecure client!


POSTGRESQL
The basic setup of the server:
    server: PostgreSQL version 8.4
    additional software:
        Python interface: psycopg2
        
The database rawsql00 is a single storage for all the raw data of two different 
models: Budget and Polls statistics. And despite the fact that all the domains,
tables, cursors and constraints will be named differently due to the semantic 
independence, every name should be preceded with a namespace: 

    <model namespace>_<object name>

The exceptions are domains that can be used in both models (e.g. long_descr 
that would work both for the data unit "Granice obwodu" of Local Polls as well
as "Cel" of Budget as unlimited varchar data type).

    <model namespace>s are: "poll" for "Local Polls", "budg" for "Budget"

Examples of tablenames in the Local Polls scheme: 
    poll_kandydaci_urzad
    poll_kandydaci_urzad, 
    poll_obwody
    poll_komitety
    
Examples of tablenames in the Budget scheme: 
    budg_cel 
    budg_main
    budg_instytucja
    
Every table and every column of each table should be coded specially and those 
codes should be stored in a special collection in the database of mongoDB
(see description below).

MONGODB - GENERAL SETUP
The basic setup:
    server: mongoDB version 1.8.1 64bit
    database name: rawsdoc00
        where "raws" is a project name ("Raw Salad")
              "doc" refers to db type (document oriented)
              "00" is a version
    port: 28017
    additional software:
        Python interface: pymongo 1.9


MONGODB - COLLECTIONS NAMESPACES
All the data in mongoDB are stored in a single database, but separate
collections.
There are 2 kinds of collections:
- actual data
- meta data

Any collection which stores the data for site navigation or any other
site-specific task is being considered as of 'meta data' kind

Naming collections:
<KK>_<TTTT><YYYY>_<descr>, where:
- <KK> (2 symbols) describes the kind of a collection: 'dd' (data),
'dr' (reference), 'md' (meta-data),  'ms' (meta-site), 'zz'
(collections for auxilar purposes)
- <TTTT> (4 symbols) indicates to what group of data a collection
belongs (examples: 'budg' - 'budget', 'poll' - local polls,
etc.). This part can be skipped in the names of references that can be
used in several data groups
- <YYYY> (4 symbols) - year (if it makes sense for a collection, if
not - this part is absent)
- <descr> - description

In the names of the meta-data collections ('md') the year is absent:
<KK>_<TTTT>_<descr>

User-defined collections (snapshots) are named by their unique id:
<KK>_<XXXXXXX>, where <KK> is 'sd' (state data) and <XXXXXXX> is a
unique id (integer with leading zeroes)

In the names of the collections connected to site structure ('ms') the
year and and the code of the data-set are absent:
<KK>_<descr>

Symbols allowed: Latin alphabet letters (ASCII), numbers and symbol '_'

Examples:
dd_budg2011_go - goal oriented budget 2011
dd_budg2011_tr - traditional budget 2011
dd_budg2012_fc - budget 'Funduszy celowe' 2011
dd_poll2010_kandydaci_rady - local polls 2010: Kandydaci Rady
dr_teryt - territory code TERYT
md_budg_scheme
md_poll_scheme
ms_nav - site navigation
sd_0000128 - snapshot # 128



MONGODB - NAVIGATOR
This provides web framework with the objects with information about the scheme
of hi level navigation of the web-site in the form of a tree.
[datasets: [their perspectives: [ issues of the perspectives ] ] ]:

[
    {
        "idef": 0,
        "name": ..., 
        "description": ...,
        "perspective": [
            {
                "idef": 0, 
                "description": ..., 
                "name": ...,
                "issue": [
                    "string1",
                    "string2"
                    ]
                },
            {
                ...
                }
            ],
        },
    {
        ...
        }
    ]
    
Optional key for each level (except "issue") - "long_description"
Each element is identified by idef (int).
Issues are identified by string value, and are represented
by a simple list of strings with no further info.


MONGODB - METADATA
There is one collection used a storage of meta-data for all the models
in the db. There should be as many docs as there are models are
specified in the Navigator

The metadata for all perspectives (views) is a list of documents
(dicts), each specifying particular perspective.

The meta-data structure of a single perspective:

{
    "name": <str>, # codename of the collection (appears as a key
                            #  'request' in db API) 
    "perspective": <str>, # the descr of the collection (appears as a
                                      # collection description in a app tree view
    "ns": <str>, # collection name in mongodb
    "dataset": <int>, # dataset id
    "idef": <int>, # perspective (view) id
    "issue": <str>, # issue id
    "explorable": <str>, # field name, which is used as a link to open
                                    # the branch in the tree view of the app
    "max_level": <str>, # deepest level in the collection
    "batchsize": <int>, # size data packets sent from the server to
    		 	           # client upon request (in Kb). Can
    		 	           # be specified only for massive collections
    "columns": [ # list of all the columns, that can be shown to the
                        # user in the app tree view.
                        # the data from one collection can be used for
                        # several views, so it's nesessary to specify
                        # here ONLY those fields that appear in the
                        # view, described by a particular meta-data
                        # see (1)
        {
            "key": <str>, # key name as it's represented in the db
            "label": <str>, # label for the interface
            "type": <str>, # type ("string" or "number")
            "processable": <bool>, # can the field be filtered, sorted, etc.
    	    "checkable": <bool>, # only for field type "number" -
                                               # indicates if the field can be
                                               # checked or not (deprecated?)
	    "basic": <bool>, # true - field shown by default on the
                                       # opening of the app tree view

            },
        {
		...
            },
        ...
        ], # end of columns
    "aux": { # additional fields that are never shown in the app, but
                # should be extracted for technical purposes.
		# those fields never appear in the tree view of the
		# app, but CAN appear in any view (data or tree) of
		# the db API, if specified in the list of parameter ?fields=[...]
		# the examples of the fields given below
        "leaf": 1, # 1 means "appear"
        "parent": 1,
        "idef": 1,
        "info": 1
        },
    "query": { # query for extracting the data from the collection.
   	       	   # should be proper mongodb query - otherwise the
   	       	   # app returns no data!
    	       	   # empty dict means "extract all"
    	       	   # see (1)
        "node": { "$in" : [ null, 1 ] },
        "val": { "$and": { "$gt": 15000, "$lt": 25000 } },
	...
        },
    "sort": { # the dict describes how the data is sorted
    	         # the keys ("0", "1", ..., "n") are the order of
    	         # sorted columns;
    	         # values are dicts: {"fieldname": <int> # sort order }:
        "0": {"idef_sort": 1},
        "1": {"parent_sort": 1},
        "2": {"level": 1},
	...
	"n": {"fieldname": <int> } # sort order
	     		   	     	        # 1 - ascending, 0 - descending
        }
    }

(1)There can be more than 1 view based on the data from the same
collection, but separated using specific columns and/or query

Metadata collection: md_budg_scheme
Access to metadata collection:
$ mongo rawsdoc00
> db.auth('admin', <admin password>) # for admin password - see conf file
> db.md_budg_scheme.find({}, {_id:0})

Metadata Update

When it is nesessary to update metadata, it is recommeded to use the script:
/scripts/db/universal/json2mongo.py

type
$ json2mongo.py -h
for help

example of use:
python json2mongo.py -f path/to/rawsdata.conf -r '{"dataset":0,"idef":0,"issue":"2011"}' -l md_budg_scheme -c budg00_2011.json

NOTES:
1. use single quotes for query
2. remember about the types: "dataset:<int>,"idef":<int>,"issue":<str>
3. if option -c is used (delete existing before insert), then the
query specifies the record which should be deleted. Written wrong, but
syntactically correct (in terms of  mongodb) will result in
duplicating the record - the old one will be left in the metadata
collection, while the new one is inserted! In this case the former
record will be used for extraction and describing the data.
Following an example given above should always work clean!

All the files with metadata are stored in 


MONGODB - DATA
Data stored in mongodb collections named as described in MONGODB -
COLLECTIONS NAMESPACES

Data organized in a flat structure, where each document exists on the
same level in a collection.
While number and names of keys in the collection can vary, there is a
defined set of keys common for all collections:

- level <str> - document level, coded as 'a', 'b', 'c', 'd', ...
- idef <str> - unique identifier. Coding: X-Y-Z-...
- idef_sort <str> - identifier formatted for easy sort. Coding: 000X-000Y-000Z
- parent <str> - parent record of a current doc. Coding:
   X-Y-... Parents of the records on the top level 'a' are null
- parent_sort <str> - parent id formatted for easy sort. Coding:
   000X-000Y 
- leaf <bool> - identifies if a record has children (false - has children, 
   true - doesn't)
- name <str> - the name of the element
- type <str> - type of the element

The rest of the fields are view specific and are described in the
metadata (see MONGODB - METADATA above)

This structure allows to create a tree using 'parent-child' relation

Some of the collections have 'nodes' (for example, 'Budzet
Zadaniowy'). Nodes allow multiple views to be represented in one
collection, but in that case, in the metadata there should be a query
indicating from which node to extract data, for example (taken from
the metadata of 'Budzet Zadaniowy'):
...
    "query": {
        "node": { "$in" : [ null, 1 ] }
       },
...

The view 'Budzet Zadaniowy' organized this way:

level: 'a', node: null, type: 'FUNKCIJA N', idef: 'n'
level: 'b', node: null, type: 'ZADANIE N.M', idef: 'n.m'
level: 'c', node: 0, type: 'DYSPONENT N.M.K', idef: 'n.m.k'
level: 'c', node: 1, type: 'PODZADANIE N.M.L', idef: 'n.m.l'
level: 'd', node: 1, type: 'DYSPONENT N.M.L.H', idef: 'n.m.l.h'

If to use query example above, it will result in the extracting of the
chain:

'FUNKCIJA N' -> 'ZADANIE N.M' -> 'PODZADANIE N.M.L' -> 'DYSPONENT N.M.L.H'

thus omitting 'DYSPONENT N.M.K' on the level 'c'

Info field
There is also a special key 'info' in some documents. The 'info' field
represents information that doesn't appear in the table view, but
pops-up as an additional info of the element.
If it is required to represent a tree structure in 'info', it should
be the same as in the collection (idefs, parents, etc.), with the
subsequent level after the level of the document, which includes
'info' key. For example:

{ 
  'idef': '5-1',
  'parent': '5',
  level: 'b',
  name:... ,
  info: [
  	{
	  	'idef': '5-1-1',
		'level': 'c',
		'parent': '5-1',
		'name': ...
	},
	{
	  	'idef': '5-1-1-1',
		'level': 'd',
		'parent': '5-1-1',
		'name': ...
	},
	...
  ]
}

MONGODB - DATA UPLOAD
The data resources for Raw-Salad project are diverse and can hardly be
standartized. That is why every collection is being uploaded by a
separate script. Here all the pecularities for each of them are described.

It is nesessary to describe data in metadata collection after import
(see above)

General info
To upload a collection there should be minimum 3 files prepared:
- upload script (.py)
- schema file (.json)
- data file (.csv)

NB: all the commands are given for the server cecyf.megivps.pl,
current location:
/home/cecyf/www/projects/rawsalad/scripts/db/budget/
the location to rawsdata.conf is changed to path/to/conf/ for brevity
In the actual setup it is in /home/cecyf/www/projects/rawsalad/src/rawsalad/site_media/


Budżet tradycyjny (0-0-2011)
1. upload data:
$ python budgtr.py -v budgtr.csv -s budgtr-schema.json -d rawsdoc00.dd_budg2011_tr -u admin -c
2. upload metadata:
$ python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":0,"idef":0,"issue":"2011"}' -l md_budg_scheme -c budg00_2011.json
WARNING! Some documents are being moved by the script to 'info' key
of their parents, their idefs are specified explicitly in the script
as a list info_idefs 

Budżet zadaniowy (0-1-2011, 0-1-2012)
two pass upload: CSV -> PostgreSQL -> MongoDB (this should be repeated
for each issue):
1. upload data 2011 to sql:
$ python budggosql11.py -f path/to/conf/rawsdata.conf -c budggo.csv budggo2011-sql.json
2. extract them and insert into mongodb:
$ python budggo.py -f path/to/conf/rawsdata.conf -y 2011 dd_budg2011_go
3. upload data 2012 to sql:
$ python budggosql11.py -f path/to/conf/rawsdata.conf budggo2012-sql.csv budggo2012-sql.json
4. extract 2012 data and insert into mongodb:
$ python budggo.py -f path/to/conf/rawsdata.conf -y 2012 dd_budg2012_go
5. upload metadata for issue 2011:
python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":0,"idef":1,"issue":"2011"}' -l md_budg_scheme -c budg01_2011.json
6. upload metadata for issue 2012:
python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":0,"idef":1,"issue":"2012"}' -l md_budg_scheme -c budg01_2012.json

Budżet instytucjonalny (0-2-2011, 0-2-2012)
Those perspectives don't require any files except of script budgin.py,
since they uses the data from Budżet zadaniowy previously imported
into PostgreSQL.
WARNING! The script budgin.py should only be started AFTER steps 1 and
3 of importing Budżet zadaniowy, and AFTER importing Budżet
tradycyjny, since it uses data from those both sources.
1. extract data 2011 from sql and insert into mongodb:
$ python budgin.py -f path/to/conf/rawsdata.conf -y 2011 -c dd_budg2011_in
2. upload metadata for issue 2011:
$ python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":0,"idef":2,"issue":"2011"}' -l md_budg_scheme -c budg02_2011.json
3. extract data 2012 from sql and insert into mongodb:
$ python budgin.py -f path/to/conf/rawsdata.conf -y 2012 -c dd_budg2012_in
4. upload metadata for issue 2012:
python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":0,"idef":2,"issue":"2012"}' -l md_budg_scheme -c budg02_2012.json

Budżet środków europejskich w układzie tradycyjnym (1-0-2011)
This perspective doesn't require schema file, as it is fairly simple and
thus specified in the script budgeutr.py (see def schema_dict())
1. upload data
$ python budgeutr.py -f path/to/conf/rawsdata.conf -l dd_budg2011_eutr -c budgeutr.csv
2. upload metadata:
$ python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":1,"idef":0,"issue":"2011"}' -l md_budg_scheme -c budg10_2011.json

Budżet środków europejskich w układzie zadaniowym (1-1-2011, 1-1-2012)
These two perspectives use data from the same collections as Budżet
zadaniowy, but take values from different columns. No data upload is
required, only metadata should be imported.
1. upload metadata 2011:
$ python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":1,"idef":1,"issue":"2011"}' -l md_budg_scheme -c budg11_2011.json
2. upload metadata:
$ python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":1,"idef":1,"issue":"2012"}' -l md_budg_scheme -c budg11_2012.json

Budżet środków europejskich w układzie instytucionalnym (1-2-2011, 1-2-2012)
These two perspectives use data from the same collections as Budżet
Instytucionalny, but take values from different columns. No data
upload is required, only metadata should be imported.
1. upload metadata 2011:
$ python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":1,"idef":2,"issue":"2011"}' -l md_budg_scheme -c budg12_2011.json
2. upload metadata:
$ python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":1,"idef":2,"issue":"2012"}' -l md_budg_scheme -c budg12_2012.json

Fundusze celowe w układzie zadaniowym (2-0-2011)
1. upload data:
$ python fundgo.py -f path/to/conf/rawsdata.conf -l dd_fund2011_go -c fundgo.csv fundgo-schema.json
2. upload metadata:
$ python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":2,"idef":0,"issue":"2011"}' -l md_budg_scheme -c budg20_2011.json

Fundusze celowe w układzie tradycyjnym (2-1-2011)
1. upload data:
$ python fundtr.py -f path/to/conf/rawsdata.conf -l dd_fund2011_tr -c fundtr.csv fundtr-schema.json
2. upload metadata:
$ python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":2,"idef":1,"issue":"2011"}' -l md_budg_scheme -c budg21_2011.json
WARNING! Some documents are moved to 'info' key of their parents,
their idefs are specified explicitly in the schema file
fundtr-schema.json as a list of the key 'info'

Agencje narodowe w układzie zadaniowym (2-2-2011)
The data structure is the same as in 2-0-2011, therefore data can be
imported using script fundgo.py, but with specific metadata.
1. upload data:
$ python fundgo.py -f path/to/conf/rawsdata.conf -l dd_agnc2011_go -c agncgo.csv agncgo-schema.json
2. upload metadata:
$ python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":2,"idef":2,"issue":"2011"}' -l md_budg_scheme -c budg22_2011.json 
WARNING! Some documents are moved to 'info' key of their parents,
their idefs are specified explicitly in the schema file
agncgo-schema.json as a list of the key 'info'

Agencje narodowe w układzie tradycyjnym (2-3-2011)
The data structure is the same as in 2-1-2011, therefore data can be
imported using script fundtr.py, but with specific metadata.
1. upload data:
$ python fundtr.py -f path/to/conf/rawsdata.conf -l dd_agnc2011_tr -c agnctr.csv agnctr-schema.json
2. upload metadata:
$ python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":2,"idef":3,"issue":"2011"}' -l md_budg_scheme -c budg23_2011.json 
WARNING! Some documents are moved to 'info' key of their parents,
their idefs are specified explicitly in the schema file
agnctr-schema.json as a list of the key 'info'

Narodowy Fundusz Zdrowia (3-0-2011, 3-1-2011)
NFZ 2011 is actually a set of 2 perspectives with different data groups:
- Dane zagregowane 3-0-2011 - data aggregated by expenses with the
possibility to add columns representing territorial entities.
- Dane ośrodków regionalnych 3-1-2011 - the top level of the hierarchy
is territorial entities, breaking down to expenses.
The script fundnfz.py imports the data from a single csv file,
creating a single collection in the db, but divided by nodes:
- 3-0-2011 - node 0
- 3-1-2011 - node 1
Thus one collection becomes a data source for both perspectives,
divided by queries in metadata.
1. upload data for both collections:
$ python fundnfz.py -f path/to/conf/rawsdata.conf -l dd_fund2011_nfz -c fundnfz.csv fundnfz-schema.json
2. upload metadata for each perspective:
$ python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":3,"idef":0,"issue":"2011"}' -l md_budg_scheme -c budg30_2011.json 
$ python ../universal/json2mongo.py -f path/to/conf/rawsdata.conf -r '{"dataset":3,"idef":1,"issue":"2011"}' -l md_budg_scheme -c budg31_2011.json 
WARNING! Some documents are being moved by the script to 'info' key
of their parents, their idefs are specified explicitly in the script
as a list info_idef_list

MONGODB - DATA - INDEXES
All the data collections in MongoDB have indexes built on their
crucial fields for accelerating data extraction, searching and
sorting. Every collection's indexes are built based on its metadata,
where it is enough information of how data can be extracted.

To ensure that all the collections have proper indexes there's a
script /scripts/db/universal/collindex.py
The scrips ENSURES if there are indexes, not CREATES them, so, it is
safe to launch it any time. It works for all collections that are
listed in the metadata collection in the db, so, it is highly
recommended to launch it every time a new data collection appears in
the db.

Launch the script:
$ python collindex.py -f path/to/conf/rawsdata.conf -l md_budg_scheme
