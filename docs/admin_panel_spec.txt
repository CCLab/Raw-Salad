Raw-Salad admin panel - Outlook


* required field
*' required depending on previously entered info
[string] - links
(N) - see note N
(N, M)  - see notes N, M
? - not yet defined


step 1: log on
------------------
*user name
*password
[log in]

step 2: action
------------------
[describe new collection] -> step 3.0
[update metadata of existing collection] -> forms for 3.0, 3.1, 3.2 joined from top to bottom
[upload data] -> step 4
[log out]


step 3.0: define metadata - general description and upload data
------------------
*dataset ___ int        *view idef ___ int        *issue ___________ (label/descr)
*description _________________________ text

file ______ [choose] string
[upload] -> step 3.1
/Django stores a user's data into temporary storage, parses it, and
suggests some definitions that appear at the next step 3.1/

step 3.1: define fields
------------------
(1)
    *key ____________________ string 50
    *visible ___ true/false (2)
    *'label ________________________________________ string 100
    *'type _____ list ( 'string', 'number' )
    *'format _______ string 20
    *'basic ___ true/false      *'processable ____ true/false        checkable ____ true/false
[add field] (3)
[save fields] -> step 3.2

step 3.2: advanced
------------------
name  _______________ <hidden> ~100 slag from dataset, view idef, issue
*ns ____________ (created automatically according to DB arch)
batch size ___ int 100..4096

*explorable ______ list (4)

sorting: (5)
    *key _____ list (4)        *direction ____ list ('ASC', 'DESC'), default 'ASC'
[add sort rule]

query: (6)

[save metadata] -> ?  [save and upload] -> step 4  [cancel] -> ?


*metadata ______ list (10)

hierarchy:
    *use hierarchy ____ (true/false)
        if use hierarchy is true:
    *'hierarchy fields: ______ string 100 (7)
    [add field]
    *'move to field _______ list (4, 8)
/to be moved to the leve of fields: checkbox - a part of 'hierarchy'
and list with number - level of it/

identification:
    *idef autofill ______ true/false (9)
    *'idef column ______ string 100


step 5: upload status and results
------------------
progress bar of the file uploading process
results: was upload successful or not, errors, warning messages,
upload statistics




Notes:
1. There should be 4 defined fields, that a user MUST HAVE in his/her
collection: 'idef', 'parent', 'level', 'leaf'. The form for a new
collection should already contain the info with the information
locked from editing (except of those indicated as -UPD):
    key: idef
    visible: true -UPD
    label: ID -UPD
    type: string
    format @
    basic: false -UPD
    processable: true -UPD
    checkable: false

    key: parent
    visible: false -UPD
    label: Rodzic -UPD
    type: string
    format: @
    basic: false -UPD
    processable: true -UPD
    checkable: false

    key: level
    visible: false -UPD
    label: Poziom -UPD
    type: string
    format: @
    basic: false -UPD
    processable: true -UPD
    checkable: false

    key: leaf
    visible: false -UPD
    label: Liść -UPD
    type: string
    format: @
    basic: false
    processable: false
    checkable: false

2. The following fields marked as *' are required only in
case 'visible' is True.
Reason: if 'visible' is True, the field goes to the columns' list of
metadata, if False - to the 'aux' list (used for just list of the
fields that should be extracted in public API, but never in the
application).

3. The link [add field] should be available only if current field's
data was entered according to the constraints.

4. The list should be formed of strings entered in the 'key' of the
defined fields. It should be updated every time a user selects [add
field]

5. Here for each entered field 2 links should be available: [up] and
[down] to update an order of the fields to sort on. It should move
them up or down in the list, the upper element thus has index 0, the
last one - N). [up] is not available for the element 0, [down] not
available for element N

6. Maybe we skip this section in admin panel? In existing metadata it
is used it A LOT, but for the collections that are structurally quite
complicated. We presume, that a user imports data with the simplest
possible hierarchy and not divided to nodes, right?

7. Of course, here we can use numbers of the fields in the src file,
that is to be uploaded - as it is now in the Bartek's script. But this
could make a confusion -from what field numbering starts - 0 (which is
easier for a programmer) or 1 (easier for a user).
Besides, string with a field name can just be copy-pasted from the src
file. Every added string is considered to be a name of the field 
indicating a child as opposed to the previous field (as in Bartek's
script).

8. The field, in which the data from hierarchy fields are
accumulated. For example, hierarchy fields [Województwo, Powiat,
Gmina] are used to create a parent-child structure and to gerenate
values for 'idef' and 'parent'. But the values from those fields will
all be saved in the field 'name' (labelled as 'Nazwa')

9. Meaning that the idefs should be produced when the file is being
uploaded. The column 'idef' should become available only if 'idef
autofill' is false. In that case the source of idef field will be
taken from fields indicated as 'hierarchy fiels'.

10. The list of the metadata records (field 'name') extracted from the
db. This should be available only if [upload] is choosen from step 2,
which allows to define metadata and to store it in the db without
immediate upload. If a user comes here straight from the step 3 -
metadata definition - then here should be used the field 'name'.
entered at the step 3.0, and it should be locked for editing.

11. The metadata is not really a big bulk of information, so, i
propose to send to the server periodically ~20-30s what has been
entered for a while. It will be saved and continuosly owerwritten in
the temporary collection in mongo. Only after a user selects [save
metadata], it's being saved into metadata collection and removed from
temp one.


Raw-Salad admin panel - Structure

It is proposed to use a unified json object for admin interface, in
which every interface element would be described so that the admin
panel inerface itself could be updated fast.

If to take into consideration the proposition about the forms given
above, the interface structure object can look like the one below (not
a complete object, but a proposition of a structure).

[
    "1": {
        "step_name": "log_on",
        "label": "Log on",
        "elements": [
            "username": {
                "label": "User name",
                "required": True,
                "type": "string",
                "length": 20,
                "value": None,
                "bounds": {
                    "left": 100, "top": 200, "width": 50, "height": 15}
                },
            "password": {
                "label": "Password",
                "required": True,
                "type": "string",
                "length": 20,
                "value": None,
                "bounds": {
                    "left": 100, "top": 220, "width": 50, "height": 15}
                },
            "log_on": {
                "label": "Log on",
                "type": "link",
                "href": "http://...",
                "bounds": { }
                }
            ]
        },
    "2": {
        "step_name": "action",
        "label": "Choose the action",
        "elements": [
            "new_collection": {
                "label": "Describe new collection",
                "type": "link",
                "href": "http://...",
                "bounds": { }
                },
            "update_collection": {
                "label": "Update existing collection",
                "type": "link",
                "href": "http://...",
                "bounds": { }
                },
            "upload_data": {
                "label": "Upload data",
                "type": "link",
                "href": "http://...",
                "bounds": { }
                },
            "log_out": {
                "label": "Log out",
                "type": "link",
                "href": "http://...",
                "bounds": { }
                },
            ]
        },
    "3-0": {
        "step_name": "metadata_general",
        "label": "Define metadata: general description",
        "elements": [
            "dataset": {
                "label": "*Dataset"
                "required": True,
                "type": "number",
                "format": "####",
                "value": None,
                "bounds": { }
                },
            "view": {
                "label": "*View"
                "required": True,
                "type": "number",
                "format": "####",
                "value": None,
                "bounds": { }
                },
            "issue": {
                "label": "*Issue"
                "required": True,
                "type": "string",
                "length": 20,
                "value": None,
                "bounds": { }
                },
            ...
            ]
        },
    ...
    ]
